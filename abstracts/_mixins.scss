//Break points
@mixin bp($point) {
  $xxs-max: "(max-width: 480px)";
  $xs-max: "(max-width: 575px)";
  $sm-max: "(max-width: 767px)";
  $smd-max: "(max-width: 991px)";
  $md-max: "(max-width: 1023px)";
  $lmd-max: "(max-width: 1024px)";
  $lg-max: "(max-width: 1199px)";
  $mlg-max: "(max-width: 1364px)";
  $xlg-max: "(max-width: 1439px)";

  @if $point == xxs-max {
    @media #{$xxs-max} {
      @content;
    }
  } @else if $point == xs-max {
    @media #{$xs-max} {
      @content;
    }
  } @else if $point == sm-max {
    @media #{$sm-max} {
      @content;
    }
  } @else if $point == smd-max {
    @media #{$smd-max} {
      @content;
    }
  } @else if $point == md-max {
    @media #{$md-max} {
      @content;
    }
  } @else if $point == lmd-max {
    @media #{$lmd-max} {
      @content;
    }
  } @else if $point == lg-max {
    @media #{$lg-max} {
      @content;
    }
  } @else if $point == mlg-max {
    @media #{$mlg-max} {
      @content;
    }
  } @else if $point == xlg-max {
    @media #{$xlg-max} {
      @content;
    }
  }
}

@mixin box-shadow($h: 10px, $v: 10px, $b: 0px, $s: 0px, $c: #000000) {
  -webkit-box-shadow: $h $v $b $s $c;
  box-shadow: $h $v $b $s $c;
}

@mixin flexbox {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
}

@mixin inline-flex {
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

// <positive-number>, initial, auto, or none
@mixin flex($fg: 1, $fs: 0, $fb: auto) {
  // Set a variable to be used by box-flex properties
  $fg-boxflex: $fg;

  // Box-Flex only supports a flex-grow value so lets grab the
  // first item in the list and just return that.
  @if type-of($fg) == "list" {
    $fg-boxflex: nth($fg, 1);
  }
  -webkit-box-flex: $fg $fs $fb;
  -ms-flex: $fg $fs $fb;
  flex: $fg $fs $fb;
}

// row (default) | row-reverse | column | column-reverse
@mixin flex-direction($direction: row) {
  @if $direction == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
    -moz-box-direction: reverse;
    -moz-box-orient: horizontal;
  } @else if $direction == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
    -moz-box-direction: normal;
    -moz-box-orient: vertical;
  } @else if $direction == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
    -moz-box-direction: reverse;
    -moz-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
    -moz-box-direction: normal;
    -moz-box-orient: horizontal;
  }
  -webkit-flex-direction: $direction;
  -ms-flex-direction: $direction;
  flex-direction: $direction;
}

// nowrap | wrap | wrap-reverse
@mixin flex-wrap($value: nowrap) {
  -webkit-flex-wrap: $value;
  @if $value == nowrap {
    -ms-flex-wrap: nowrap;
  } @else {
    -ms-flex-wrap: $value;
  }
  flex-wrap: $value;
}

// <flex-direction> || <flex-wrap>
@mixin flex-flow(
  $values: (
    row nowrap,
  )
) {
  -webkit-flex-flow: $values;
  -ms-flex-flow: $values;
  flex-flow: $values;
}

@mixin order($int: 0) {
  -webkit-box-ordinal-group: $int + 1;
  -moz-box-ordinal-group: $int + 1;
  -webkit-order: $int;
  -ms-flex-order: $int;
  order: $int;
}

@mixin flex-grow($int: 1) {
  -webkit-box-flex: $int;
  -moz-box-flex: $int;
  -webkit-flex-grow: $int;
  -ms-flex: $int;
  flex-grow: $int;
}

@mixin flex-shrink($int: 0) {
  -webkit-flex-shrink: $int;
  -moz-flex-shrink: $int;
  -ms-flex: $int;
  flex-shrink: $int;
}

@mixin flex-basis($value: auto) {
  -webkit-flex-basis: $value;
  flex-basis: $value;
}

// flex-start | flex-end | center | space-between | space-around
@mixin justify-content($value: flex-start) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -moz-box-pack: start;
    -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
    -moz-box-pack: end;
    -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
    -moz-box-pack: justify;
    -ms-flex-pack: justify;
  } @else if $value == space-around {
    -ms-flex-pack: distribute;
  } @else {
    -webkit-box-pack: $value;
    -moz-box-pack: $value;
    -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
  justify-content: $value;
}

// flex-start | flex-end | center | space-between | space-around | stretch
@mixin align-content($value: stretch) {
  -webkit-align-content: $value;
  @if $value == flex-start {
    -ms-flex-line-pack: start;
  } @else if $value == flex-end {
    -ms-flex-line-pack: end;
  } @else {
    -ms-flex-line-pack: $value;
  }
  align-content: $value;
}

// flex-start | flex-end | center | baseline | stretch
@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -moz-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -moz-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -moz-box-align: $value;
    -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
  align-items: $value;
}

// auto | flex-start | flex-end | center | baseline | stretch
@mixin align-self($value: auto) {
  -webkit-align-self: $value;
  @if $value == flex-start {
    -ms-flex-item-align: start;
  } @else if $value == flex-end {
    -ms-flex-item-align: end;
  } @else {
    -ms-flex-item-align: $value;
  }
  align-self: $value;
}

@mixin transition(
  $for: all,
  $time-in: 250ms,
  $type: ease-in-out,
  $time-out: 0s
) {
  transition: $for $time-in $type $time-out;
  -moz-transition: $for $time-in $type $time-out;
  -webkit-transition: $for $time-in $type $time-out;
  -o-transition: $for $time-in $type $time-out;
}

// Browser Prefixes
@mixin transform($transforms) {
  -webkit-transform: $transforms;
  -ms-transform: $transforms;
  transform: $transforms;
}

// Rotate
@mixin rotate($deg) {
  @include transform(rotate(#{$deg}deg));
}

// Scale
@mixin scale($scale) {
  @include transform(scale($scale));
}

// Translate
@mixin translate($x, $y) {
  @include transform(translate($x, $y));
}
